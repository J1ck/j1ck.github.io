{"config":{"lang":["en"],"separator":"[\\s\\-\\.]","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":""},{"location":"#profilestore-wrapper-focused-on-client-and-server-connectivity","title":"ProfileStore Wrapper focused on Client and Server Connectivity","text":"<ul> <li>Minimal network usage - Only replicates a diff so unchanging data isn't needlessly replicated.</li> <li>Built with simplicity in mind - No crazy abstractions to be found, extremely barebones, no bloat.</li> <li>All the benefits of ProfileStore - Built for scalability, easy to learn, future-proof, made for ambitious projects.</li> </ul>"},{"location":"#read-the-docs-profilestore-source","title":"Read the Docs \u2022 ProfileStore Source","text":""},{"location":"api/","title":"API","text":"<p>Tip</p> <p>Just like ProfileStore, any method that has <code>Async</code> in it's name will potentially yield. Read each API entry for more information on how each method yields</p>"},{"location":"api/#types","title":"Types","text":"<pre><code>type ChangedPackage = {\n    Callback : (NewValue : any) -&gt; (),\n    Path : {any}\n}\n\ntype InternalProfileData = {\n    _Player : Player,\n    _IsUpdating : boolean,\n    _ChangedPackages : {[ChangedPackage] : any},\n    _UpdateQueue : {[number] : (Profile : Profile) -&gt; ()}\n}\n\ntype DataPath = {[number] : string}\n\ntype MiscTable = {[any] : any}\n\ntype DisconnectCallback = () -&gt; ()\n\ntype Profile =\n    ProfileStore.Profile&lt;typeof(DefaultData)&gt;\n    &amp; InternalProfileData\n</code></pre>"},{"location":"api/#client","title":"Client","text":""},{"location":"api/#getdataasync","title":"GetDataAsync","text":"<p><pre><code>.GetDataAsync() : MiscTable\n</code></pre> Get's the <code>LocalPlayer</code>'s <code>Profile.Data</code>. If their Profile hasn't been loaded, this method will yield until it has loaded</p>"},{"location":"api/#getdata","title":"GetData","text":"<p><pre><code>.GetData() : MiscTable?\n</code></pre> Get's the given <code>LocalPlayer</code>'s <code>Profile.Data</code></p> <p>Warning</p> <p>This method will potentially return <code>nil</code> if the <code>LocalPlayer</code>'s Profile hasn't been loaded yet. You should use <code>GetDataAsync</code> if the Profile isn't guaranteed to be loaded</p>"},{"location":"api/#listentovaluechanged","title":"ListenToValueChanged","text":"<p><pre><code>.ListenToValueChanged(\n    DataPath : DataPath,\n    Callback : (NewValue : any) -&gt; ()\n) : DisconnectCallback\n</code></pre> Listens to any data changed in the specified <code>DataPath</code> and will fire the given callback. This method also works for tables and will fire when anything inside the table is changed. Returns a function to disconnect the listener</p> <p>Warning</p> <p>This method will yield if the <code>LocalPlayer</code>'s Profile hasn't been loaded yet</p> <p>Example Usage <pre><code>local Disconnect = nil\n\nDisconnect = ProfileStoreWrapper.ListenToValueChanged({\"Statistics\", \"DistanceTravelled\"}, function(DistanceTravelled : number)\n    Path.To.UI.Text = `Distance: {DistanceTravelled}`\nend)\n\n-- call to disconnect the listener\nDisconnect()\n\n-- listening to the whole Statistics table will also work\nDisconnect = ProfileStoreWrapper.ListenToValueChanged({\"Statistics\"}, function(Statistics)\n    Path.To.UI.Text = `Distance: {Statistics.DistanceTravelled}`\nend)\n</code></pre></p>"},{"location":"api/#getdatafrompath","title":"GetDataFromPath","text":"<p><pre><code>.GetDataFromPath(RootTable : MiscTable, DataPath : DataPath) : any?\n</code></pre> Used internally to get the current value of a <code>DataPath</code> in a specified table, usually <code>Profile.Data</code>.</p> <p>Example Usage <pre><code>local DataPath = {\"Statistics\", \"TimesJoined\"}\nlocal ProfileData = ProfileStoreWrapper.GetDataAsync()\nlocal CurrentValue = ProfileStoreWrapper.GetDataFromPath(ProfileData, DataPath)\n\nif CurrentValue &gt; 100 then\n    Path.To.UI.Visible = true\nend\n</code></pre></p>"},{"location":"api/#server","title":"Server","text":""},{"location":"api/#startsessionasync","title":"StartSessionAsync","text":"<p><pre><code>.StartSessionAsync(Player : Player)\n</code></pre> Starts a session with the given <code>Player</code> if one hasn't already been started. Should be called when a <code>Player</code> joines the game through events such as <code>Players.PlayerAdded</code></p> <p>Example Usage <pre><code>local Players = game:GetService(\"Players\")\n\nPlayers.PlayerAdded:Connect(function(Player : Player)\n    ProfileStoreWrapper.StartSessionAsync(Player)\n\n    local Profile = ProfileStoreWrapper.GetProfile(Player) -- as CreateProfileAsync doesn't return anything, we can use this method instead\nend)\n</code></pre></p>"},{"location":"api/#endsessionasync","title":"EndSessionAsync","text":"<p><pre><code>.EndSessionAsync(Player : Player)\n</code></pre> Ends the given <code>Player</code>'s session and will subsequently kick them</p> <p>Tip</p> <p>This method will wait for the update queue to be completely flushed before ending the session</p> <p>Example Usage <pre><code>local Players = game:GetService(\"Players\")\n\nPlayers.PlayerRemoving:Connect(function(Player : Player)\n    ProfileStoreWrapper.UpdateProfile(Player, function(Profile)\n        task.wait(1)\n\n        Profile.Data.Coins += 100\n    end)\n\n    ProfileStoreWrapper.EndSessionAsync(Player) -- will wait for all callbacks to run before ending the player's session\nend)\n</code></pre></p>"},{"location":"api/#getprofileasync","title":"GetProfileAsync","text":"<p><pre><code>.GetProfileAsync(Player : Player) : Profile?\n</code></pre> Get's the given <code>Player</code>'s Profile. If their Profile hasn't been loaded, this method will yield until it has loaded</p> <p>Warning</p> <p>If a <code>Player</code> leaves while this method is being called, it will return <code>nil</code>. If you want to safely update a <code>Player</code>'s data, consider using <code>.UpdateProfile</code> or <code>.UpdateProfileAsync</code></p> <p>Danger</p> <p>Updating a Profile's data outside of using <code>.UpdateProfile</code> or <code>.UpdateProfileAsync</code> will not replicate until the <code>Player</code> rejoins the game. Treat the Profile's <code>Profile.Data</code> returned from this method as read-only </p>"},{"location":"api/#getprofile","title":"GetProfile","text":"<p><pre><code>.GetProfile(Player : Player) : Profile?\n</code></pre> Get's the given <code>Player</code>'s Profile.</p> <p>Warning</p> <p>This method will potentially return <code>nil</code> if the given <code>Player</code>'s Profile hasn't been loaded yet. You should use <code>GetProfileAsync</code> if the Profile isn't guaranteed to be loaded</p> <p>Danger</p> <p>Updating a Profile's data outside of using <code>.UpdateProfile</code> or <code>.UpdateProfileAsync</code> will not replicate until the <code>Player</code> rejoins the game. Treat the Profile's <code>Profile.Data</code> returned from this method as read-only</p>"},{"location":"api/#updateprofileasync","title":"UpdateProfileAsync","text":"<p><pre><code>.UpdateProfileAsync(Player : Player, Callback : (Profile : Profile) -&gt; ())\n</code></pre> Updates the given <code>Player</code>'s Profile using the provided callback. Will yield until the provided callback has completed</p> <p>Example Usage <pre><code>RemoteEvent.OnServerEvent:Connect(function(Player : Player)\n    ProfileStoreWrapper.UpdateProfileAsync(Player, function(Profile : ProfileStoreWrapper.Profile)\n        task.wait(1)\n\n        Profile.Data.Coins += 100\n    end)\n\n    -- Player will now guaranteed have 100 more coins\nend)\n</code></pre></p>"},{"location":"api/#updateprofile","title":"UpdateProfile","text":"<p><pre><code>.UpdateProfile(Player : Player, Callback : (Profile : Profile) -&gt; ())\n</code></pre> Updates the given <code>Player</code>'s Profile using the provided callback.</p> <p>Warning</p> <p>This method will not yield at all, which means that the <code>Player</code>'s data may not be updated even after the method was called. You should use <code>UpdateProfileAsync</code> if you need the provided callback to also yield the called method's scope</p> <p>Example Usage <pre><code>RemoteEvent.OnServerEvent:Connect(function(Player : Player)\n    ProfileStoreWrapper.UpdateProfile(Player, function(Profile : ProfileStoreWrapper.Profile)\n        task.wait(1)\n\n        Profile.Data.Coins += 100\n    end)\n\n    -- Player will NOT have 100 more coins as these 2 scopes are now running in parallel\nend)\n</code></pre></p>"},{"location":"api/#listentovaluechanged_1","title":"ListenToValueChanged","text":"<p><pre><code>.ListenToValueChanged(\n    Player : Player,\n    DataPath : DataPath,\n    Callback : (NewValue : any) -&gt; ()\n) : DisconnectCallback?\n</code></pre> Listens to any data changed in the specified <code>DataPath</code> and will fire the given callback. This method also works for tables and will fire when anything inside the table is changed. Returns a function to disconnect the listener</p> <p>Warning</p> <p>This method will return <code>nil</code> if there is no Profile attached to the given <code>Player</code>, including if the <code>Player</code>'s Profile hasn't loaded yet</p> <p>Example Usage <pre><code>local Players = game:GetService(\"Players\")\n\nPlayers.PlayerAdded:Connect(function(Player : Player)\n    ProfileStoreWrapper.StartSessionAsync(Player)\n\n    local Disconnect = nil\n\n    Disconnect = ProfileStoreWrapper.ListenToValueChanged(Player, {\"Statistics\", \"DistanceTravelled\"}, function(DistanceTravelled : number)\n        if DistanceTravelled &gt; 100 then\n            ProfileStoreWrapper.UpdateProfile(Player, function(Profile : ProfileStoreWrapper.Profile)\n                Profile.Data.Coins += 50\n                Profile.Data.Statistics.DistanceTravelled = 0\n            end)\n        end\n    end)\n\n    -- call to disconnect the listener\n    Disconnect()\n\n    -- listening to the whole Statistics table will also work\n    Disconnect = ProfileStoreWrapper.ListenToValueChanged(Player, {\"Statistics\"}, function(Statistics)\n        if Statistics.DistanceTravelled &gt; 100 then\n            ProfileStoreWrapper.UpdateProfile(Player, function(Profile : ProfileStoreWrapper.Profile)\n                Profile.Data.Coins += 50\n                Profile.Data.Statistics.DistanceTravelled = 0\n            end)\n        end\n    end)\nend)\n</code></pre></p>"},{"location":"api/#getdatafrompath_1","title":"GetDataFromPath","text":"<p><pre><code>.GetDataFromPath(RootTable : MiscTable, DataPath : DataPath) : any?\n</code></pre> Used internally to get the current value of a DataPath in a specified table, usually <code>Profile.Data</code></p> <p>Example Usage <pre><code>local Players = game:GetService(\"Players\")\nlocal BadgeService = game:GetService(\"BadgeService\")\n\nPlayers.PlayerAdded:Connect(function(Player : Player)\n    ProfileStoreWrapper.StartSessionAsync(Player)\n\n    local DataPath = {\"Statistics\", \"TimesJoined\"}\n    local Profile = ProfileStoreWrapper.GetProfile(Player)\n    local CurrentValue = ProfileStoreWrapper.GetDataFromPath(Profile.Data, DataPath)\n\n    if CurrentValue &gt; 100 then\n        BadgeService:AwardBadge(Player, BADGE_ID)\n    end\nend)\n</code></pre></p>"},{"location":"gettingstarted/","title":"Getting Started","text":""},{"location":"gettingstarted/#installation","title":"Installation","text":""},{"location":"gettingstarted/#get-from-the-roblox-toolbox-or-download-from-github","title":"Get from the Roblox Toolbox or Download from Github","text":""},{"location":"gettingstarted/#usage","title":"Usage","text":"<p>Place the module anywhere where both the Client and Server can access it. There is no need to extract the underlying Client and Server modules, however the wrapper will work perfectly fine if you decide to do so.</p>"},{"location":"gettingstarted/#client","title":"Client","text":"<pre><code>local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal ProfileStoreWrapper = require(ReplicatedStorage.ProfileStoreWrapper)\n\n-- nothing more is required, feel free to interact with the Client API however you want!\n\nlocal Profile = ProfileStoreWrapper.GetDataAsync()\n\nProfileStoreWrapper.ListenToValueChanged({\"Coins\"}, function(Coins : number)\n    Path.To.UI.Text = `Coins: {Coins}`\nend)\n</code></pre>"},{"location":"gettingstarted/#server","title":"Server","text":"<pre><code>local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Players = game:GetService(\"Players\")\nlocal BadgeService = game:GetService(\"BadgeService\")\n\nlocal ProfileStoreWrapper = require(ReplicatedStorage.ProfileStoreWrapper)\n\n-- as the wrapper doesn't handle stopping and starting sessions, it is our job to handle that\n\nlocal function OnPlayerAdded(Player : Player)\n    ProfileStoreWrapper.StartSessionAsync(Player)\n\n    -- youre free to do whatever you want with this player's profile from this point on!\n\n    local Profile = ProfileStoreWrapper.GetProfile(Player)\n\n    ProfileStoreWrapper.ListenToValueChanged(Player, {\"Coins\"}, function(Coins : number)\n        if Coins &gt; 100 then\n            BadgeService:AwardBadge(Player, BADGE_ID)\n        end\n    end)\nend\n\nlocal function OnPlayerRemoving(Player : Player)\n    ProfileStoreWrapper.EndSessionAsync(Player)\nend\n\nfor _, Player in Players:GetPlayers() do\n    task.spawn(OnPlayerAdded, Player)\nend\n\nPlayers.PlayerAdded:Connect(OnPlayerAdded)\nPlayers.PlayerRemoving:Connect(OnPlayerRemoving)\n</code></pre>"}]}
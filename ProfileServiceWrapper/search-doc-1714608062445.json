[{"title":"Client","type":0,"sectionRef":"#","url":"/ProfileServiceWrapper/api/Client","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Client","url":"/ProfileServiceWrapper/api/Client#functions","content":" "},{"title":"Get​","type":1,"pageTitle":"Client","url":"/ProfileServiceWrapper/api/Client#Get","content":"&lt;/&gt; Client.Get() → {any} Gets the LocalPlayer's current Profile Data caution Will yeild if the LocalPlayer's Data hasn't loaded info Client.Get() is the same as Server.Get(LocalPlayer).Profile.Data  "},{"title":"ListenToValueChanged​","type":1,"pageTitle":"Client","url":"/ProfileServiceWrapper/api/Client#ListenToValueChanged","content":"&lt;/&gt; Client.ListenToValueChanged( Path: {string},-- {&quot;Index&quot;, &quot;NestedIndex&quot;} -&gt; Table.Index.NestedIndex Callback: (NewValue: any) → () ) → () → ()-- Disconnect function Listens to whenever the specified Path's value is changed info Callback will fire upon declaration if the Path's value is not nil --- Example Usage local Disconnect = Client.ListenToValueChanged({&quot;Currencies&quot;, &quot;Money&quot;}, function(Money : number) Gui.PathToTextLabel.Text = tostring(Money) end) task.delay(5, Disconnect)  "},{"title":"Server","type":0,"sectionRef":"#","url":"/ProfileServiceWrapper/api/Server","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Server","url":"/ProfileServiceWrapper/api/Server#functions","content":" "},{"title":"CreateProfile​","type":1,"pageTitle":"Server","url":"/ProfileServiceWrapper/api/Server#CreateProfile","content":"&lt;/&gt; Server.CreateProfile(Player: Player ) → () Attempts to load the specified Player's Profile  "},{"title":"RemoveProfile​","type":1,"pageTitle":"Server","url":"/ProfileServiceWrapper/api/Server#RemoveProfile","content":"&lt;/&gt; Server.RemoveProfile(Player: Player ) → () Attempts to unload the specified Player's Profile  "},{"title":"Get​","type":1,"pageTitle":"Server","url":"/ProfileServiceWrapper/api/Server#Get","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Server.Get(Player: Player ) → any Attempts to get the specified Player's Profile info Will only yield if the specified Player's Profile doesn't already exist caution Will error if the specified Player leaves during invocation  "},{"title":"Peek​","type":1,"pageTitle":"Server","url":"/ProfileServiceWrapper/api/Server#Peek","content":"&lt;/&gt; Server.Peek(Player: Player ) → any? Gets the specified Player's Profile without yielding  "},{"title":"Update​","type":1,"pageTitle":"Server","url":"/ProfileServiceWrapper/api/Server#Update","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Server.Update( Player: Player , Callback: (Profile: any) → () ) → () Update's the specified Player's Profile Data warning This should be the only way you update a Player's Profile info If a Player's Profile tries to be updated while already being updated (eg. asynchronous collisions or recursively called), any subsequent updates will be added to a queue and fired synchronously in order. The first update will yield until the queue has been fully flushed -- Example Usage Server.Update(game.Players.qut100, function(Profile) Profile.Data.Coins += 10 if Profile.Data.Coins &gt; 50 then Profile.Data.Coins -= 50 Profile.Data.Gems += 1 end end)   "},{"title":"ListenToValueChanged​","type":1,"pageTitle":"Server","url":"/ProfileServiceWrapper/api/Server#ListenToValueChanged","content":"&lt;/&gt; Server.ListenToValueChanged( Player: Player , Path: {string},-- {&quot;Index&quot;, &quot;NestedIndex&quot;} -&gt; Table.Index.NestedIndex Callback: (NewValue: any) → () ) → () → ()-- Disconnect function Listens to whenever the specified Path's value is changed info Callback will fire upon declaration if the Path's value is not nil --- Example Usage local Player = game.Players.qut100 local Disconnect = Server.ListenToValueChanged(Player, {&quot;Currencies&quot;, &quot;Money&quot;}, function(Money : number) if Money &gt; 50 then Server.Update(Player, function(Profile) Profile.Data.Gems += 1 end) end end) task.delay(5, Disconnect)  "}]
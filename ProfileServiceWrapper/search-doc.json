[{"title":"Client","type":0,"sectionRef":"#","url":"/ProfileServiceWrapper/api/Client","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Client","url":"/ProfileServiceWrapper/api/Client#functions","content":" "},{"title":"Get​","type":1,"pageTitle":"Client","url":"/ProfileServiceWrapper/api/Client#Get","content":"&lt;/&gt; Client.Get() → {any}-- The LocalPlayer's Profile data Gets the LocalPlayer's current Profile data  "},{"title":"ListenToValueChanged​","type":1,"pageTitle":"Client","url":"/ProfileServiceWrapper/api/Client#ListenToValueChanged","content":"&lt;/&gt; Client.ListenToValueChanged( Path: {any},-- The path of the value that is being listened to Callback: (NewValue: any) → ()-- This function is called whenever the specified path's value is changed ) → () → ()-- Disconnect function Listens to whenever the specified path's value is changed. The callback will fire upon declaration if the path's value is not nil --- Listens to whenever Profile.Data.Currencies.Money is changed Client.ListenToValueChanged({&quot;Currencies&quot;, &quot;Money&quot;}, function(Money : number) Gui.PathToTextLabel.Text = tostring(Money) end)   "},{"title":"_ListenToDataChanges​","type":1,"pageTitle":"Client","url":"/ProfileServiceWrapper/api/Client#_ListenToDataChanges","content":"&lt;/&gt; Client._ListenToDataChanges() → ()  caution This should not be called manually, and instead should be edited by the developer to properly listen for data changes from the server. -- Example: function Client._ListenToDataChanges() local Remotes = require(game:GetService(&quot;ReplicatedStorage&quot;):WaitForChild(&quot;Remotes&quot;)) Remotes.OnEvent(&quot;ReplicateData&quot;, function(Added, Removed) Client._MergeDiff(Client._Data, Added, Removed) end) end Starts listening to any data changes that the server sends "},{"title":"Server","type":0,"sectionRef":"#","url":"/ProfileServiceWrapper/api/Server","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Server","url":"/ProfileServiceWrapper/api/Server#functions","content":" "},{"title":"CreateProfile​","type":1,"pageTitle":"Server","url":"/ProfileServiceWrapper/api/Server#CreateProfile","content":"&lt;/&gt; Server.CreateProfile( Player: Player -- The specified Player ) → () Attempts to load the specified Player's Profile  "},{"title":"RemoveProfile​","type":1,"pageTitle":"Server","url":"/ProfileServiceWrapper/api/Server#RemoveProfile","content":"&lt;/&gt; Server.RemoveProfile( Player: Player -- The specified Player ) → () Attempts to unload the specified Player's Profile  "},{"title":"Get​","type":1,"pageTitle":"Server","url":"/ProfileServiceWrapper/api/Server#Get","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Server.Get( Player: Player -- The specified Player ) → any-- The specified Player's Profile Attempts to get the specified Player's Profile. Will only yield if the specified Player's Profile doesn't already exist  "},{"title":"Peek​","type":1,"pageTitle":"Server","url":"/ProfileServiceWrapper/api/Server#Peek","content":"&lt;/&gt; Server.Peek( Player: Player -- The specified Player ) → any?-- The specified Player's Profile (if it exists) Gets the specified Player's Profile without yielding  "},{"title":"Update​","type":1,"pageTitle":"Server","url":"/ProfileServiceWrapper/api/Server#Update","content":"&lt;/&gt; Server.Update( Player: Player ,-- The specified Player Callback: (Profile: any) → ()-- Update the specified Player's data inside of this function ) → () Use this function to update the specified Player's Profile data  "},{"title":"_ReplicateDataChange​","type":1,"pageTitle":"Server","url":"/ProfileServiceWrapper/api/Server#_ReplicateDataChange","content":"&lt;/&gt; Server._ReplicateDataChange( Player: Player ,-- The specified Player Added: {any},-- Any data that was added Removed: {any}-- Any data that was removed ) → ()  caution This should not be called manually, and instead should be edited by the developer to properly replicate data to the Player. -- Example Code: function Server._ReplicateDataChange(Player : Player, Added : {any}, Removed : {any}) local Remotes = require(game.ReplicatedStorage.Remotes) Remotes.Fire(&quot;ReplicateData&quot;, Player, Added, Removed) end Replicates added and removed data to the specified Player "}]